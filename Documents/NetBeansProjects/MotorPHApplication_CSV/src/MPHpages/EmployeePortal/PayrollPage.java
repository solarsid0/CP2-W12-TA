/*
NEW UPDATES:
- Changed employee data csv to : MotorPH Employee Data UP.csv
- Preview of payslip
- Download feature for the payslip
- Default file name set
- Pop-up prompt if file is saved in the device

*/
package MPHpages.EmployeePortal;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class PayrollPage extends javax.swing.JFrame {

    /**
     * Creates new form Payroll Employee View Page
     */
    private String employeeID; // Add a field to store the employee ID
    private String fullName; // Add a field to store the full name
    private String userRole; // Add a field to store the user role
   
     
    /**
     * Creates new form Payroll Employee View Page
     * @param fullName
     * @param employeeID
     * @param userRole
     */
    
    public PayrollPage(String fullName, String employeeID, String userRole) {
        initComponents();
        this.fullName = fullName;
        this.employeeID = employeeID;
        this.userRole = userRole;
        populateEmployeeDetails(employeeID);
        // Set the font for the payrollareaTA
        payrollareaTA.setFont(new Font("Courier New", Font.PLAIN, 15));
    }
    
    private static class EmployeeDetailsFetcher {

        private static final String CSV_FILE_PATH = "src/CSV/MotorPH Employee Data UP.csv";
        private static final String CSV_SEPARATOR = ",";

        public static String[] fetchEmployeeDetails(String employeeID) throws IOException {
            String[] employeeDetails = null;

            try (BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    String[] parts = line.split(CSV_SEPARATOR);
                    if (parts.length > 0 && parts[0].equals(employeeID)) {
                        employeeDetails = parts;
                        break;
                    }
                }
            }

            return employeeDetails;
        }
    }
    
      private void populateEmployeeDetails(String employeeID) {
        try {
            String[] employeeDetails = EmployeeDetailsFetcher.fetchEmployeeDetails(employeeID);
            if (employeeDetails != null) {
                inputidpayLBL.setText(employeeDetails[0]);
                inputfirstnamepayLBL.setText(employeeDetails[1]);
                inputlastnamepayLBL.setText(employeeDetails[2]);
                inputpositionpayLBL.setText(employeeDetails[11]);
                
            } else {
                // Employee not found, handle this case
            }
        } catch (IOException e) {
            // Handle IO exception
        }
    }
     // Constructor without arguments for initializing components and adding action listener
    public PayrollPage() {
        initComponents();
        backbuttonpayrollPB.addActionListener(this::backbuttonpayrollPBActionPerformed);
        this.userRole = null;
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        payrollmainPNL = new javax.swing.JPanel();
        payrollheaderPNL = new javax.swing.JPanel();
        payrollheaderLBL = new javax.swing.JLabel();
        backbuttonpayrollPB = new javax.swing.JButton();
        payrollscrollSP = new javax.swing.JScrollPane();
        payrollareaTA = new javax.swing.JTextArea();
        payrollemployeeidLBL = new javax.swing.JLabel();
        inputidpayLBL = new javax.swing.JLabel();
        payrollfirstnameLBL = new javax.swing.JLabel();
        inputfirstnamepayLBL = new javax.swing.JLabel();
        payrolllastnameLBL = new javax.swing.JLabel();
        inputlastnamepayLBL = new javax.swing.JLabel();
        payrollpositionLBL = new javax.swing.JLabel();
        inputpositionpayLBL = new javax.swing.JLabel();
        monthComboBox = new javax.swing.JComboBox<>();
        yearComboBox = new javax.swing.JComboBox<>();
        selectmonthLBL = new javax.swing.JLabel();
        selectyearLBL = new javax.swing.JLabel();
        generatepayslipPB = new javax.swing.JButton();
        downloadpayslipPB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        payrollmainPNL.setBackground(new java.awt.Color(204, 204, 204));

        payrollheaderPNL.setBackground(new java.awt.Color(102, 102, 102));

        payrollheaderLBL.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        payrollheaderLBL.setForeground(new java.awt.Color(255, 255, 255));
        payrollheaderLBL.setText("PAYROLL INFORMATION");

        backbuttonpayrollPB.setBackground(new java.awt.Color(204, 0, 0));
        backbuttonpayrollPB.setFont(new java.awt.Font("Helvetica", 1, 14)); // NOI18N
        backbuttonpayrollPB.setForeground(new java.awt.Color(255, 255, 255));
        backbuttonpayrollPB.setText("Back");
        backbuttonpayrollPB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonpayrollPBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout payrollheaderPNLLayout = new javax.swing.GroupLayout(payrollheaderPNL);
        payrollheaderPNL.setLayout(payrollheaderPNLLayout);
        payrollheaderPNLLayout.setHorizontalGroup(
            payrollheaderPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, payrollheaderPNLLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backbuttonpayrollPB, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(214, 214, 214)
                .addComponent(payrollheaderLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        payrollheaderPNLLayout.setVerticalGroup(
            payrollheaderPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(payrollheaderPNLLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(payrollheaderPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(payrollheaderLBL)
                    .addComponent(backbuttonpayrollPB, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        payrollareaTA.setBackground(new java.awt.Color(255, 255, 255));
        payrollareaTA.setColumns(20);
        payrollareaTA.setRows(5);
        payrollscrollSP.setViewportView(payrollareaTA);

        payrollemployeeidLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        payrollemployeeidLBL.setForeground(new java.awt.Color(0, 0, 0));
        payrollemployeeidLBL.setText("Employee ID:");

        inputidpayLBL.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        inputidpayLBL.setForeground(new java.awt.Color(0, 0, 0));
        inputidpayLBL.setText(". . .");

        payrollfirstnameLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        payrollfirstnameLBL.setForeground(new java.awt.Color(0, 0, 0));
        payrollfirstnameLBL.setText("First Name:");

        inputfirstnamepayLBL.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        inputfirstnamepayLBL.setForeground(new java.awt.Color(0, 0, 0));
        inputfirstnamepayLBL.setText(". . .");

        payrolllastnameLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        payrolllastnameLBL.setForeground(new java.awt.Color(0, 0, 0));
        payrolllastnameLBL.setText("Last Name:");

        inputlastnamepayLBL.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        inputlastnamepayLBL.setForeground(new java.awt.Color(0, 0, 0));
        inputlastnamepayLBL.setText(". . .");

        payrollpositionLBL.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        payrollpositionLBL.setForeground(new java.awt.Color(0, 0, 0));
        payrollpositionLBL.setText("Position:");

        inputpositionpayLBL.setFont(new java.awt.Font("Helvetica", 0, 14)); // NOI18N
        inputpositionpayLBL.setForeground(new java.awt.Color(0, 0, 0));
        inputpositionpayLBL.setText(". . .");

        monthComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        yearComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2020", "2021", "2022", "2023", "2024" }));

        selectmonthLBL.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        selectmonthLBL.setForeground(new java.awt.Color(0, 0, 0));
        selectmonthLBL.setText("Select Month");

        selectyearLBL.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        selectyearLBL.setForeground(new java.awt.Color(0, 0, 0));
        selectyearLBL.setText("Select Year");

        generatepayslipPB.setBackground(new java.awt.Color(102, 102, 102));
        generatepayslipPB.setFont(new java.awt.Font("Helvetica", 1, 12)); // NOI18N
        generatepayslipPB.setForeground(new java.awt.Color(255, 255, 255));
        generatepayslipPB.setText("Generate Payslip");
        generatepayslipPB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatepayslipPBActionPerformed(evt);
            }
        });

        downloadpayslipPB.setBackground(new java.awt.Color(102, 102, 102));
        downloadpayslipPB.setFont(new java.awt.Font("Helvetica", 1, 12)); // NOI18N
        downloadpayslipPB.setForeground(new java.awt.Color(255, 255, 255));
        downloadpayslipPB.setText("Download Payslip");
        downloadpayslipPB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadpayslipPBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout payrollmainPNLLayout = new javax.swing.GroupLayout(payrollmainPNL);
        payrollmainPNL.setLayout(payrollmainPNLLayout);
        payrollmainPNLLayout.setHorizontalGroup(
            payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(payrollheaderPNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(payrollmainPNLLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(payrollmainPNLLayout.createSequentialGroup()
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(payrollfirstnameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(payrollemployeeidLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(payrollpositionLBL)
                                .addComponent(payrolllastnameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(inputlastnamepayLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputfirstnamepayLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputidpayLBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(inputpositionpayLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE))
                        .addGap(4, 4, 4))
                    .addGroup(payrollmainPNLLayout.createSequentialGroup()
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(payrollmainPNLLayout.createSequentialGroup()
                                .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(selectmonthLBL))
                                .addGap(18, 18, 18)
                                .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(selectyearLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(downloadpayslipPB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(generatepayslipPB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)))
                .addComponent(payrollscrollSP, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );
        payrollmainPNLLayout.setVerticalGroup(
            payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(payrollmainPNLLayout.createSequentialGroup()
                .addComponent(payrollheaderPNL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(payrollmainPNLLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payrollemployeeidLBL)
                            .addComponent(inputidpayLBL))
                        .addGap(18, 18, 18)
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payrollfirstnameLBL)
                            .addComponent(inputfirstnamepayLBL))
                        .addGap(18, 18, 18)
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payrolllastnameLBL)
                            .addComponent(inputlastnamepayLBL))
                        .addGap(18, 18, 18)
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(payrollpositionLBL)
                            .addComponent(inputpositionpayLBL))
                        .addGap(37, 37, 37)
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectmonthLBL)
                            .addComponent(selectyearLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(payrollmainPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(monthComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(yearComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(generatepayslipPB, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(downloadpayslipPB, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(96, Short.MAX_VALUE))
                    .addGroup(payrollmainPNLLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(payrollscrollSP)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(payrollmainPNL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(payrollmainPNL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backbuttonpayrollPBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonpayrollPBActionPerformed

        // Create an instance of EmployeePortal
        EmployeePortal employeePortal = new EmployeePortal(fullName, employeeID, userRole);
        // Center the EmployeePortal
        employeePortal.setLocationRelativeTo(null);
        // Make the EmployeePortal visible
        employeePortal.setVisible(true);
        // Close the current Payroll Page Employee View
        this.dispose();
    }//GEN-LAST:event_backbuttonpayrollPBActionPerformed

    private void generatepayslipPBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatepayslipPBActionPerformed
        // Get selected month and year
    String selectedMonth = monthComboBox.getSelectedItem().toString();
    String selectedYear = yearComboBox.getSelectedItem().toString();

    // Fetch payslip data
    try {
        String payslipData = fetchPayslipData(employeeID, selectedMonth, selectedYear);
        if (payslipData != null) {
            payrollareaTA.setText(payslipData);
        } else {
            payrollareaTA.setText("No payslip found for the selected period.");
        }
    } catch (IOException e) {
        payrollareaTA.setText("Error fetching payslip data.");
    }
    }//GEN-LAST:event_generatepayslipPBActionPerformed

    private void downloadpayslipPBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadpayslipPBActionPerformed
        // Download button to store payslip information for the period
        try {
         String selectedMonth = monthComboBox.getSelectedItem().toString();
         String selectedYear = yearComboBox.getSelectedItem().toString();
         String payslipData = fetchPayslipData(employeeID, selectedMonth, selectedYear);

         if (payslipData != null) {
             JFileChooser fileChooser = new JFileChooser();
             fileChooser.setSelectedFile(new File("Payslip_" + employeeID + "_" + selectedMonth + "_" + selectedYear + ".pdf"));
             int result = fileChooser.showSaveDialog(this);
             if (result == JFileChooser.APPROVE_OPTION) {
                 String fileName = fileChooser.getSelectedFile().getAbsolutePath();
                 downloadpayslipAsPDF(payslipData, fileName);
             }
         } else {
             System.out.println("No payslip data found for the selected period.");
         }
     } catch (IOException | DocumentException e) {
         System.out.println("Error generating payslip PDF: " + e.getMessage());
     }
    }//GEN-LAST:event_downloadpayslipPBActionPerformed
    
    private String fetchPayslipData(String employeeID, String month, String year) throws IOException {
    String csvFilePath = "src/CSV/Payslip Info v2.csv";
    String csvSeparator = ",";

    try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath))) {
        String line;
        while ((line = reader.readLine()) != null) {
            String[] parts = line.split(csvSeparator);
            if (parts.length > 0 && parts[0].equals(employeeID) && parts[11].equals(month) && parts[12].equals(year)) {
                // Format the payslip information for display
                return String.format(
                    "========================================================= \n" +
                    "   MotorPH - Country's Top Motorcycle Online Dealership   \n" +
                    "   Payslip Information                        \n" +
                    "========================================================= \n" +  
                    "\n" + 
                    "\n" + 
                    "   Employee ID: %s\n" + 
                    "   Last Name: %s\n" +
                    "   First Name: %s\n" +
                    "   Supervisor: %s\n" +
                    "\n" + 
                    "\n" + 
                    "\n" + 
                     "========================================================= \n" + 
                    "   PAYROLL BREAKDOWN                      \n" + 
                     "========================================================= \n" + 
                    "   Total Allowance: %s\n" +
                    "   Gross Pay: %s\n" +
                    "   Net Pay: %s\n" +
                    "\n" + 
                    "   SSS Contribution: %s\n" +
                    "   HMO Contribution: %s\n" +
                    "   Pagibig Contribution: %s\n" +
                    "   Taxable Income: %s\n" +
                    "\n" + 
                    "\n" + 
                    "   Month: %s\n" +
                    "   Year: %s\n",
                    parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], 
                    parts[7], parts[8], parts[9], parts[10], parts[11], parts[12]
                );
            }
        }
    }
    return null; // Return null if no matching record is found
}
    
    
    private void downloadpayslipAsPDF(String payslipData, String fileName) throws DocumentException, FileNotFoundException {
        try {
            Document document = new Document();
            PdfWriter.getInstance(document, new FileOutputStream(fileName));
            document.open();
            
            // Load the image
            String imagePath = "src/media/MPH LOGO 200 X 112.png";  // Update the path to where your image is located
            Image logo = Image.getInstance(imagePath);
            logo.scaleToFit(100, 100); // Scale the image to fit
            logo.setAlignment(Image.ALIGN_CENTER); // Center the image
            
            // Add the image to the document
            document.add(logo);
            
            // Add some space after the image
            document.add(new Paragraph("\n\n"));
            
            // Get the font from the payrollareaTA
            Font textAreaFont = payrollareaTA.getFont();
            
            // Define fonts using the text area font
            com.itextpdf.text.Font boldFont = FontFactory.getFont(textAreaFont.getFontName(), textAreaFont.getSize() + 8, Font.BOLD);
            com.itextpdf.text.Font plainFont = FontFactory.getFont(textAreaFont.getFontName(), textAreaFont.getSize());
            
            // Split the data into lines
            String[] lines = payslipData.split("\n");
            
            // The rest of the lines with plain font
            for (String line : lines) {
                document.add(new Paragraph(line, plainFont));
            }
            
            document.close();
            
            // Show a message dialog to the user
            JOptionPane.showMessageDialog(this, "Payslip PDF saved successfully: " + fileName, "Payslip Saved", JOptionPane.INFORMATION_MESSAGE);
        } catch (BadElementException ex) {
            Logger.getLogger(PayrollPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PayrollPage.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PayrollPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new PayrollPage().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backbuttonpayrollPB;
    private javax.swing.JButton downloadpayslipPB;
    private javax.swing.JButton generatepayslipPB;
    private javax.swing.JLabel inputfirstnamepayLBL;
    private javax.swing.JLabel inputidpayLBL;
    private javax.swing.JLabel inputlastnamepayLBL;
    private javax.swing.JLabel inputpositionpayLBL;
    private javax.swing.JComboBox<String> monthComboBox;
    private javax.swing.JTextArea payrollareaTA;
    private javax.swing.JLabel payrollemployeeidLBL;
    private javax.swing.JLabel payrollfirstnameLBL;
    private javax.swing.JLabel payrollheaderLBL;
    private javax.swing.JPanel payrollheaderPNL;
    private javax.swing.JLabel payrolllastnameLBL;
    private javax.swing.JPanel payrollmainPNL;
    private javax.swing.JLabel payrollpositionLBL;
    private javax.swing.JScrollPane payrollscrollSP;
    private javax.swing.JLabel selectmonthLBL;
    private javax.swing.JLabel selectyearLBL;
    private javax.swing.JComboBox<String> yearComboBox;
    // End of variables declaration//GEN-END:variables

}
